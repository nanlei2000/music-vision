{"version":3,"sources":["Visualizer.tsx","Viewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultObservable","Rx","Uint8Array","Viewer","_ref","data","chartContainer","document","createElement","_useState","useState","_useState2","Object","slicedToArray","isMounted","setIsMounted","_useState3","undefined","_useState4","chart","setChart","useEffect","console","log","G2","Chart","container","forceFit","height","padding","left","right","bottom","top","source","axis","legend","tooltip","line","position","color","render","changeData","react_default","a","id","ref","defaultMusicUrl","visualizerContext","pause","resume","subject","Boolean","window","location","hostname","match","ReactDOM","viewData","setViewData","url","setUrl","_useState5","_useState6","isPlaying","setIsPlaying","_useState7","_useState8","_useState9","_useState10","isLoading","setIsLoading","setPlayStatus","fetchSrc","fetch","then","res","arrayBuffer","src","volume","size","audioContext","AudioContext","webkitAudioContext","gainNode","createGain","gain","value","connect","destination","analyser","createAnalyser","fftSize","decodeAudioData","buffer","bufferSource","createBufferSource","loop","start","arr","frequencyBinCount","sub","suspend","pipe","tap","getByteFrequencyData","map","multicast","refCount","Visualizer","context","reduce","prev","cur","index","concat","subscribe","throttleTime","finally","style","marginRight","backgroundColor","onClick","onChange","e","target","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cefc61f.chunk.js","sourcesContent":["import * as Rx from 'rxjs';\nimport { tap, map, multicast, refCount } from 'rxjs/operators';\ninterface VisualizeParams {\n  src: ArrayBuffer;\n  size: number;\n  volume: number;\n}\n\nexport interface VisualizerContext {\n  pause: () => void;\n  resume: () => void;\n  subject: Rx.Observable<Uint8Array>;\n}\nexport const defaultObservable = Rx.of(new Uint8Array());\nexport function Visualizer({ src, volume, size }: VisualizeParams): Promise<VisualizerContext> {\n  let pub = defaultObservable;\n\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  // gainNode 增益\n  const gainNode = audioContext.createGain();\n  gainNode.gain.value = volume;\n  gainNode.connect(audioContext.destination);\n  // analyser 分析\n  const analyser = audioContext.createAnalyser();\n  analyser.fftSize = size * 2;\n  analyser.connect(gainNode);\n  // draw\n  const decodeCallback = (buffer: AudioBuffer): VisualizerContext => {\n    const bufferSource = audioContext.createBufferSource();\n    bufferSource.buffer = buffer;\n    bufferSource.loop = true;\n    bufferSource.connect(analyser);\n    bufferSource.start(0);\n    const arr = new Uint8Array(analyser.frequencyBinCount);\n    const sub = new Rx.BehaviorSubject(arr);\n    pub = Rx.interval(0, Rx.animationFrameScheduler).pipe(\n      tap(() => {\n        analyser.getByteFrequencyData(arr);\n      }),\n      map(() => {\n        return arr;\n      }),\n      multicast(sub),\n      refCount()\n    );\n    // Rx.interval(0, Rx.animationFrameScheduler).subscribe(() => {\n    //   analyser.getByteFrequencyData(arr);\n    //   // console.log(arr);\n    //   sub.next(arr);\n    // });\n    return {\n      pause: () => {\n        audioContext.suspend();\n      },\n      resume: () => {\n        audioContext.resume();\n      },\n      subject: pub\n    };\n  };\n  return audioContext.decodeAudioData(src).then(decodeCallback);\n}\n","import React, { useEffect, useState } from 'react';\nimport G2 from '@antv/g2';\nexport type ChartDatum = {\n  index: number;\n  volume: number;\n};\n\nexport function Viewer({ data }: { data: ChartDatum[] }) {\n  let chartContainer: HTMLDivElement = document.createElement('div');\n  const [isMounted, setIsMounted] = useState(false);\n  const [chart, setChart] = useState(undefined as undefined | G2.Chart);\n  useEffect(() => {\n    if (!isMounted) {\n      console.log(`once`);\n      const chart = new G2.Chart({\n        container: chartContainer,\n        forceFit: true,\n        height: 400,\n        // width: 1200,\n        padding: {\n          left: 0,\n          right: 0,\n          bottom: 0,\n          top: 0\n        }\n      });\n      chart.source(data);\n      chart.axis(false);\n      chart.legend(false);\n      chart.tooltip(false);\n      chart\n        .line()\n        .position('index*volume')\n        .color('#000');\n      chart.render();\n      setChart(chart);\n      setIsMounted(true);\n    }\n    if (chart && isMounted) {\n      chart.changeData(data);\n    }\n    return () => {};\n  });\n  return (\n    <div\n      id=\"chart\"\n      ref={ref => {\n        chartContainer = ref!;\n      }}\n    />\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Visualizer, defaultObservable, VisualizerContext } from './Visualizer';\nimport { Viewer, ChartDatum } from './Viewer';\nimport './App.css';\nimport { throttleTime, tap, map } from 'rxjs/operators';\nconst defaultMusicUrl = 'http://47.94.108.47/Levitate.mp3';\nlet pause = () => {};\nlet resume = () => {};\n\nlet visualizerContext = {\n  pause,\n  resume,\n  subject: defaultObservable\n};\nexport default function Example(): JSX.Element {\n  const [viewData, setViewData] = useState([] as ChartDatum[]);\n  const [url, setUrl] = useState(defaultMusicUrl);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const setPlayStatus = () => {\n    if (isPlaying) {\n      visualizerContext.pause();\n      setIsPlaying(false);\n    } else {\n      visualizerContext.resume();\n      setIsPlaying(true);\n    }\n  };\n  const fetchSrc = (url: string) => {\n    return fetch(url)\n      .then(res => res.arrayBuffer())\n      .then(data => {\n        return Visualizer({\n          src: data,\n          size: 128,\n          volume: 0.6\n        });\n      });\n  };\n  useEffect(() => {\n    if (!isMounted) {\n      setIsLoading(true);\n      fetchSrc(url)\n        .then(context => {\n          visualizerContext = context;\n          context.subject\n            .pipe(\n              map(data => {\n                return data.reduce(\n                  (prev, cur, index) => {\n                    return prev.concat({\n                      index: index + 1,\n                      volume: cur\n                    });\n                  },\n                  [] as ChartDatum[]\n                );\n              })\n            )\n            .subscribe(setViewData);\n          context.subject\n            .pipe(\n              throttleTime(1000),\n              tap(data => {\n                console.log(data);\n              })\n            )\n            .subscribe();\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    setIsMounted(true);\n  }, []);\n  return (\n    <div>\n      <button\n        style={{\n          marginRight: '10px',\n          backgroundColor: isLoading ? 'orange' : 'unset'\n        }}\n        onClick={() => (setPlayStatus(), fetchSrc(url))}\n      >\n        {isLoading ? 'loading' : 'load'}\n      </button>\n      <input onChange={e => setUrl(e.target.value)} value={url} />\n      <p>\n        <button onClick={() => setPlayStatus()}>toggle</button>\n      </p>\n      <Viewer data={viewData} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}