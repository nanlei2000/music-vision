{"version":3,"sources":["Visualizer.tsx","Draw.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultObservable","Rx","Uint8Array","Draw","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","canvas","document","createElement","ctx","inherits","createClass","key","value","getContext","console","log","i","j","beginPath","x","y","endAngle","Math","PI","anticlockwise","arc","fill","closePath","stroke","moveTo","quadraticCurveTo","bezierCurveTo","fillStyle","width","height","radius","lineTo","roundedRect","_this2","react_default","a","ref","Component","defaultMusicUrl","visualizerContext","pause","resume","close","subject","mapFrequencyDataToChart","data","reduce","prev","cur","index","concat","volume","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setViewData","_useState3","_useState4","url","setUrl","_useState5","_useState6","isPlaying","setIsPlaying","_useState7","_useState8","_useState9","_useState10","isLoading","setIsLoading","_useState11","Subscription","EMPTY","_useState12","visualizerSub","setVisualizerSub","initVisualizer","fetch","then","res","arrayBuffer","fetchSrc","_ref","src","size","audioContext","AudioContext","webkitAudioContext","gainNode","createGain","gain","connect","destination","analyser","createAnalyser","fftSize","decodeAudioData","buffer","bufferSource","createBufferSource","loop","start","arr","frequencyBinCount","sub","suspend","unsubscribe","pipe","tap","getByteFrequencyData","map","multicast","refCount","Visualizer","context","runVisualize","style","marginRight","backgroundColor","onClick","finally","onChange","e","target","Draw_Draw","subscribe","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee1befe0.chunk.js","sourcesContent":["import * as Rx from 'rxjs';\nimport { tap, map, multicast, refCount } from 'rxjs/operators';\ninterface VisualizeParams {\n  src: ArrayBuffer;\n  size: number;\n  volume: number;\n}\n\nexport interface VisualizerContext {\n  pause: () => void;\n  resume: () => void;\n  close: () => void;\n  subject: Rx.Observable<Uint8Array>;\n}\nexport const defaultObservable = Rx.of(new Uint8Array());\nexport function Visualizer({\n  src,\n  volume,\n  size\n}: VisualizeParams): Promise<VisualizerContext> {\n  let frequency$ = defaultObservable;\n\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  // gainNode 增益\n  const gainNode = audioContext.createGain();\n  gainNode.gain.value = volume;\n  gainNode.connect(audioContext.destination);\n  // analyser 分析\n  const analyser = audioContext.createAnalyser();\n  analyser.fftSize = size * 2;\n  analyser.connect(gainNode);\n  // draw\n  const decodeCallback = (buffer: AudioBuffer): VisualizerContext => {\n    const bufferSource = audioContext.createBufferSource();\n    bufferSource.buffer = buffer;\n    bufferSource.loop = true;\n    bufferSource.connect(analyser);\n    bufferSource.start(0);\n    const arr = new Uint8Array(analyser.frequencyBinCount);\n    const sub = new Rx.BehaviorSubject(arr);\n    frequency$ = Rx.interval(0, Rx.animationFrameScheduler).pipe(\n      tap(() => {\n        console.log(1);\n        analyser.getByteFrequencyData(arr);\n      }),\n      map(() => {\n        return arr;\n      }),\n      multicast(sub),\n      refCount()\n    );\n    // Rx.interval(0, Rx.animationFrameScheduler).subscribe(() => {\n    //   analyser.getByteFrequencyData(arr);\n    //   // console.log(arr);\n    //   sub.next(arr);\n    // });\n    return {\n      pause: () => {\n        audioContext.suspend();\n      },\n      resume: () => {\n        audioContext.resume();\n      },\n      close: () => {\n        audioContext.close();\n        sub.unsubscribe();\n      },\n      subject: frequency$\n    };\n  };\n  return audioContext.decodeAudioData(src).then(decodeCallback);\n}\n","import React, { Component } from 'react';\nimport { contextLog } from './canvasCallLog';\nexport class Draw extends Component {\n  canvas: HTMLCanvasElement = document.createElement('canvas');\n  ctx!: CanvasRenderingContext2D;\n  constructor(props: any) {\n    super(props);\n  }\n  componentDidMount() {\n    this.ctx = this.canvas.getContext('2d')!;\n    // contextLog(this, Object.getOwnPropertyNames(this.__proto__));\n  }\n  draw1() {\n    console.log(this.ctx);\n    for (var i = 0; i < 4; i++) {\n      for (var j = 0; j < 3; j++) {\n        this.ctx.beginPath();\n        var x = 25 + j * 50; // x 坐标值\n        var y = 25 + i * 50; // y 坐标值\n        var radius = 20; // 圆弧半径\n        var startAngle = 0; // 开始点\n        var endAngle = Math.PI + (Math.PI * j) / 2; // 结束点\n        var anticlockwise = i % 2 == 0 ? false : true; // 顺时针或逆时针\n\n        this.ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n\n        if (i > 1) {\n          this.ctx.fill();\n          this.ctx.closePath();\n        } else {\n          this.ctx.stroke();\n          this.ctx.closePath();\n        }\n      }\n    }\n  }\n  draw2() {\n    // 问号\n    const { ctx } = this;\n    ctx.beginPath();\n    ctx.moveTo(75, 25);\n    ctx.quadraticCurveTo(25, 25, 25, 62.5);\n    ctx.quadraticCurveTo(25, 100, 50, 100);\n    ctx.quadraticCurveTo(50, 120, 30, 125);\n    ctx.quadraticCurveTo(60, 120, 65, 100);\n    ctx.quadraticCurveTo(125, 100, 125, 62.5);\n    ctx.quadraticCurveTo(125, 25, 75, 25);\n    ctx.stroke();\n  }\n  draw3() {\n    // 心形\n    const { ctx } = this;\n    ctx.beginPath();\n    ctx.moveTo(75, 40);\n    ctx.bezierCurveTo(75, 37, 70, 25, 50, 25);\n    ctx.bezierCurveTo(20, 25, 20, 62.5, 20, 62.5);\n    ctx.bezierCurveTo(20, 80, 40, 102, 75, 120);\n    ctx.bezierCurveTo(110, 102, 130, 80, 130, 62.5);\n    ctx.bezierCurveTo(130, 62.5, 130, 25, 100, 25);\n    ctx.bezierCurveTo(85, 25, 75, 37, 75, 40);\n    ctx.fillStyle = 'deeppink';\n    ctx.fill();\n  }\n  draw4() {\n    roundedRect(this.ctx, 12, 12, 150, 150, 15);\n  }\n  render() {\n    return (\n      <canvas\n        ref={ref => {\n          this.canvas = ref!;\n        }}\n        width={600}\n        height={400}\n      />\n    );\n  }\n}\n\nfunction roundedRect(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  ctx.beginPath();\n  ctx.moveTo(x, y + radius);\n  ctx.lineTo(x, y + height - radius);\n  ctx.quadraticCurveTo(x, y + height, x + radius, y + height);\n  ctx.lineTo(x + width - radius, y + height);\n  ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);\n  ctx.lineTo(x + width, y + radius);\n  ctx.quadraticCurveTo(x + width, y, x + width - radius, y);\n  ctx.lineTo(x + radius, y);\n  ctx.quadraticCurveTo(x, y, x, y + radius);\n  // test\n  var a = ctx.fillStyle;\n  // ctx.fillStyle = 'deeppink';\n  ctx.stroke();\n}\n","import React, { useState, useEffect } from 'react';\nimport { Visualizer, defaultObservable, VisualizerContext } from './Visualizer';\nimport { Viewer, ChartDatum } from './Viewer';\nimport './App.css';\nimport { throttleTime, tap, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { Draw } from './Draw';\nconst defaultMusicUrl =\n  'https://raw.githubusercontent.com/nanlei2000/music-src/master/Levitate.mp3';\nlet pause = () => {};\nlet resume = () => {};\nlet close = () => {};\n\nlet visualizerContext: VisualizerContext = {\n  pause,\n  resume,\n  close,\n  subject: defaultObservable\n};\nconst mapFrequencyDataToChart: (\n  value: Uint8Array,\n  index: number\n) => ChartDatum[] = data => {\n  return data.reduce(\n    (prev, cur, index) => {\n      return prev.concat({\n        index: index + 1,\n        volume: cur\n      });\n    },\n    [] as ChartDatum[]\n  );\n};\nexport default function App(): JSX.Element {\n  const [viewData, setViewData] = useState([] as ChartDatum[]);\n  const [url, setUrl] = useState(defaultMusicUrl);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [visualizerSub, setVisualizerSub] = useState(Subscription.EMPTY);\n  const setPlayStatus = () => {\n    if (isPlaying) {\n      visualizerContext.pause();\n      visualizerSub.unsubscribe();\n      setIsPlaying(false);\n    } else {\n      visualizerContext.resume();\n      runVisualize(visualizerContext);\n      setIsPlaying(true);\n    }\n  };\n  const fetchSrc = (url: string) => {\n    return fetch(url).then(res => res.arrayBuffer());\n  };\n  const initVisualizer = () => {\n    return fetchSrc(url)\n      .then(data => {\n        return Visualizer({\n          src: data,\n          size: 128,\n          volume: 0.6\n        });\n      })\n      .then(context => {\n        visualizerContext = context;\n        runVisualize(context);\n      });\n  };\n  const handleLoadingUrl = () => {\n    visualizerContext.close();\n    setIsLoading(true);\n    initVisualizer().finally(() => {\n      setIsLoading(false);\n    });\n  };\n  // useEffect(() => {\n  //   if (!isMounted) {\n  //     setIsLoading(true);\n  //     initVisualizer().finally(() => {\n  //       setIsLoading(false);\n  //     });\n  //   }\n  //   setIsMounted(true);\n  // }, []);\n  return (\n    <div>\n      <button\n        style={{\n          marginRight: '10px',\n          backgroundColor: isLoading ? 'orange' : 'unset'\n        }}\n        onClick={() => {\n          handleLoadingUrl();\n        }}\n      >\n        {isLoading ? 'loading' : 'load'}\n      </button>\n      <input onChange={e => setUrl(e.target.value)} value={url} />\n      <p>\n        <button onClick={() => setPlayStatus()}>toggle</button>\n      </p>\n      {/* <Viewer data={viewData} /> */}\n      <Draw />\n    </div>\n  );\n\n  function runVisualize(context: VisualizerContext) {\n    const sub = context.subject\n      .pipe(map(mapFrequencyDataToChart))\n      .subscribe(setViewData);\n    setVisualizerSub(sub);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}